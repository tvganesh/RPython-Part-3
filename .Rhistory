aa <- df$region != "Aggregates"
# Remove the aggregates
countries_df <- df[aa,]
bb = subset(wbData, country %in% ccc$country)
wbData <- join(j3,fertility)
bb = subset(wbData, country %in% ccc$country)
cc = join(bb,countries_df)
dd = complete.cases(cc)
developmentDF = cc[dd,]
dim(developmentDF)
dim(cc)
dim(wDT)
gg<- gvisMotionChart(developmentDF,
idvar = "country",
timevar = "year",
xvar = "GDP",
yvar = "Life Expectancy",
sizevar ="Population",
colorvar = "region")
plot(gg)
gg<- gvisMotionChart(cc,
idvar = "country",
timevar = "year",
xvar = "GDP",
yvar = "Life Expectancy",
sizevar ="Population",
colorvar = "region")
plot(gg)
poverty= WDI(indicator='SI.POV.2DAY', country="all",start=1960, end=2016)
names(poverty)[3]="Poverty headcount ratio"
j1 <- join(population, gdp)
j2 <- join(j1,lifeExpectancy)
j3 <- join(j2,income)
j4 <- join(j3,poverty)
wbData <- join(j4,fertility)
bb = subset(wbData, country %in% ccc$country)
cc = join(bb,countries_df)
gg<- gvisMotionChart(cc,
idvar = "country",
timevar = "year",
xvar = "GDP",
yvar = "Life Expectancy",
sizevar ="Population",
colorvar = "region")
plot(gg)
elecAccess= WDI(indicator='EG.ELC.ACCS.ZS', country="all",start=1960, end=2016)
# Electric power consumption
elecConsumption= WDI(indicator='EG.USE.ELEC.KH.PC', country="all",start=1960, end=2016)
#CO2 emissions
co2Emissions= WDI(indicator='EN.ATM.CO2E.KT', country="all",start=1960, end=2016)
j1 <- join(population, gdp)
j2 <- join(j1,elecAccess)
j3 <- join(j2,elecConsumption)
j4 <- join(j3,co2Emissions)
wbData <- join(j4,fertility)
ee = subset(wbData1, country %in% ccc$country)
j1 <- join(population, gdp)
j2 <- join(j1,elecAccess)
j3 <- join(j2,elecConsumption)
wbData1 <- join(j3,co2Emissions)
ee = subset(wbData1, country %in% ccc$country)
ff = join(ee,countries_df)
names(population)[3]="Population"
names(gdp)[3]="GDP"
names(elecAccess)[3]="Access to Electricity"
names(elecConsumption)[3]="Electric power consumption per capita"
names(co2Emissions)[3]="CO2 emisions"
gg<- gvisMotionChart(ff,
idvar = "country",
timevar = "year",
xvar = "GDP",
yvar = "Access to Electricity",
sizevar ="Population",
colorvar = "region")
plot(gg)
population = WDI(indicator='SP.POP.TOTL', country="all",start=1960, end=2016)
# GDP
gdp= WDI(indicator='NY.GDP.MKTP.CD', country="all",start=1960, end=2016)
# Access to electricity
elecAccess= WDI(indicator='EG.ELC.ACCS.ZS', country="all",start=1960, end=2016)
# Electric power consumption per capita
elecConsumption= WDI(indicator='EG.USE.ELEC.KH.PC', country="all",start=1960, end=2016)
#CO2 emissions
co2Emissions= WDI(indicator='EN.ATM.CO2E.KT', country="all",start=1960, end=2016)
names(population)[3]="Population"
names(gdp)[3]="GDP"
names(elecAccess)[3]="Access to Electricity"
names(elecConsumption)[3]="Electric power consumption per capita"
names(co2Emissions)[3]="CO2 emisions"
j1 <- join(population, gdp)
j2 <- join(j1,elecAccess)
j3 <- join(j2,elecConsumption)
wbData1 <- join(j3,co2Emissions)
```
wdi_data =WDI_data
# The 1st matrix is the list is the set of all World Bank Indicators
indicators=wdi_data[[1]]
# The 2nd  matrix gives the set of countries and regions
countries=wdi_data[[2]]
df = as.data.frame(countries)
aa <- df$region != "Aggregates"
# Remove the aggregates
countries_df <- df[aa,]
# Subset from the development data only those corresponding to the countries
ee = subset(wbData1, country %in% ccc$country)
ff = join(ee,countries_df)
gg<- gvisMotionChart(ff,
idvar = "country",
timevar = "year",
xvar = "GDP",
yvar = "Access to Electricity",
sizevar ="Population",
colorvar = "region")
plot(gg)
sanitationAccess= WDI(indicator='SH.STA.ACSN', country="all",start=1960, end=2016)
names(sanitationAccess)[3]="Access to sanitation(% popn)"
names(sanitationAccess)[3]="Access to sanitation(% popn)"
j1 <- join(population, gdp)
j2 <- join(j1,elecAccess)
j3 <- join(j2,elecConsumption)
j4 <- join(j3,co2Emissions)
wbData1 <- join(j3,sanitationAccess)
ee = subset(wbData1, country %in% ccc$country)
ff = join(ee,countries_df)
gg<- gvisMotionChart(ff,
idvar = "country",
timevar = "year",
xvar = "GDP",
yvar = "Access to Electricity",
sizevar ="Population",
colorvar = "region")
plot(gg)
library(WDI)
library(ggplot2)
library(googleVis)
library(plyr)
gg<- gvisMotionChart(cc,
idvar = "country",
timevar = "year",
xvar = "GDP",
yvar = "Life Expectancy",
sizevar ="Population",
colorvar = "region")
plot(gg)
cat(gg$html$chart, file="chart1.html")
cat(gg$html$chart, file="chart1.html")
getwd()
gg1<- gvisMotionChart(ff,
idvar = "country",
timevar = "year",
xvar = "GDP",
yvar = "Access to Electricity",
sizevar ="Population",
colorvar = "region")
plot(gg1)
cat(gg1$html$chart, file="chart2.html")
shiny::runApp('C:/software/cricket-package/cricsheet/googly')
shiny::runApp('C:/software/cricket-package/cricsheet/googly')
runApp('C:/software/cricket-package/cricsheet/googly')
IPLTeamsAll <- gsub(".RData","",a2)
runApp('C:/software/cricket-package/cricsheet/googly')
-.5*5 +0.5*3
a= 1 *0.8 *2^5*0.2
a
b= 1 *0/3*.7^5 *.7
b
c=a/a+b
c
b= 1 *0.3*.7^5 *.7
b
a= 1 *0.8 *.2^5*0.2
a
b= 1 *0.3*.7^5 *.7
b
c=a/a+b
c
c=a/(a+b)
c
a= 1 *0.8 *.2^5*0.2
a
b= 1 *0.3*.7^5 *.7
b
d= b/(a+b)
d
a= 1 *0.8 *.2^5*0.5
a
b= 1 *0.3*.7^5 *.5
b
c=a/(a+b)
c
d= b/(a+b)
d
a1= 6 * 0.5^2 *0.4^2
b1= 6 *.7^2*.3^2
c1=6 *.3^2*.7^2
d1=a1/(a1+b1+c1)
d1
e1= (b1+c1)/(a1+b1+c1)
e1
a= 1 *0.8^0 *.2^5*0.5
a
b= 1 *0.3^0 *.7^5 *0.5
b
c=a/(a+b)
c
0.2^5
0.2^5*.5
a= 1 *0.8^0 *.2^5*0.5
a
b= 1 *0.3^0 *.7^5 *0.5
b
c=a/(a+b)
c
d= b/(a+b)
d
a1= 6 * 0.5^2 *0.4^2
b1= 6 *.7^2*.3^2
c1=6 *.3^2*.7^2
a1= 6 * 0.5^2 *0.4^2*0.4
b1= 6 *.7^2*.3^2 * 0.3
c1=6 *.3^2*.7^2 *0.3
d1=a1/(a1+b1+c1)
d1
e1= (b1+c1)/(a1+b1+c1)
e1
theta=seq(0,1,by=0.01)
plot(theta,dbeta(theta,1,5))
1/5
1-pbeta(0.5,1,5)
1-pbeta(0.95,8,16)
1-pbeta(0.95,2,2)
pbeta(q=0.35, shape1=8, shape2=16)
pbeta(q=0.35, shape1=0, shape2=5)
pbeta(0.5,1,5)
1-pbeta(0.5,1,5)
pbeta(0.5,1,5)
qbeta(p=0.975, shape1=8, shape2=16)
1/7*100
version
install.pacxkages("leaps")
install.packages("leaps")
library(leaps)
library(leaps)
regfit.full=regsubsets(mpg~.,train)
df=read.csv("auto_mpg.csv",stringsAsFactors = FALSE) # Data from UCI
source('RFunctions-1.R')
setwd("C:/Users/Ganesh/RandPython-Part3")
source('RFunctions-1.R')
df=read.csv("auto_mpg.csv",stringsAsFactors = FALSE) # Data from UCI
df1 <- as.data.frame(sapply(df,as.numeric))
df2 <- df1 %>% select(cylinder,displacement, horsepower,weight, acceleration, year,mpg)
df3 <- df2[complete.cases(df2),]
train_idx <- trainTestSplit(df3,trainPercent=75,seed=5)
train <- df3[train_idx, ]
test <- df3[-train_idx, ]
fit <- lm(mpg~. ,data=train)
summary(fit)
train=test
rsquared1=Rsquared(fit,test,test$mpg)
sprintf("R-squared for multi-variate regression is : %f", rsquared1)
library(leaps)
regfit.full=regsubsets(mpg~.,train)
summary(regfit.full)
reg.summary=summary(regfit.full)
reg.summary
names(reg.summary)
reg.summary$rsq
plot(reg.summary$rss,xlab="Number of Variables",ylab="RSS",type="l")
plot(reg.summary$adjr2,xlab="Number of Variables",ylab="Adjusted RSq",type="l")
which.max(reg.summary$adjr2)
points(11,reg.summary$adjr2[11], col="red",cex=2,pch=20)
plot(reg.summary$cp,xlab="Number of Variables",ylab="Cp",type='l')
which.max(reg.summary$adjr2)
points(11,reg.summary$adjr2[11], col="red",cex=2,pch=20)
plot(reg.summary$cp,xlab="Number of Variables",ylab="Cp",type='l')
which.min(reg.summary$cp)
points(10,reg.summary$cp[10],col="red",cex=2,pch=20)
which.min(reg.summary$bic)
plot(reg.summary$bic,xlab="Number of Variables",ylab="BIC",type='l')
points(6,reg.summary$bic[6],col="red",cex=2,pch=20)
plot(regfit.full,scale="r2")
plot(regfit.full,scale="adjr2")
plot(regfit.full,scale="Cp")
plot(regfit.full,scale="bic")
coef(regfit.full,6)
summary(fit)
regfit.fwd=regsubsets(mpg~.,data=train,method="forward")
summary(regfit.fwd)
regfit.bwd=regsubsets(mpg~.,data=train,method="backward")
summary(regfit.bwd)
coef(regfit.full,7)
coef(regfit.full,3)
regfit.bwd
coef(regfit.full,6)
coef(regfit.full,6)
coef(regfit.fwd,6)
coef(regfit.bwd,6)
regfit.best=regsubsets(mpg~.,data=train)
test.mat=model.matrix(mpg~.,data=test)
regfit.best
val.errors=rep(NA,6)
for(i in 1:6){
coefi=coef(regfit.best,id=i)
pred=test.mat[,names(coefi)]%*%coefi
val.errors[i]=mean((Hitters$Salary[test]-pred)^2)
}
val.errors[i]=mean((test$mpg-pred)^2)
for(i in 1:6){
coefi=coef(regfit.best,id=i)
pred=test.mat[,names(coefi)]%*%coefi
val.errors[i]=mean((test$mpg-pred)^2)
}
val.errors=rep(NA,6)
for(i in 1:6){
coefi=coef(regfit.best,id=i)
pred=test.mat[,names(coefi)]%*%coefi
val.errors[i]=mean((test$mpg-pred)^2)
}
val.errors
which.min(val.errors)
regfit.best=regsubsets(mpg~.,data=train,method="forward")
val.errors=rep(NA,6)
for(i in 1:6){
coefi=coef(regfit.best,id=i)
pred=test.mat[,names(coefi)]%*%coefi
val.errors[i]=mean((test$mpg-pred)^2)
}
val.errors
regfit.best=regsubsets(mpg~.,data=train,method="backward")
val.errors=rep(NA,6)
for(i in 1:6){
coefi=coef(regfit.best,id=i)
pred=test.mat[,names(coefi)]%*%coefi
val.errors[i]=mean((test$mpg-pred)^2)
}
val.errors
regfit.fwd=regsubsets(mpg~.,data=train,method="forward")
val.errors=rep(NA,6)
for(i in 1:6){
coefi=coef(regfit.fwd,id=i)
pred=test.mat[,names(coefi)]%*%coefi
val.errors[i]=mean((test$mpg-pred)^2)
}
val.errors
regfit.bwd=regsubsets(mpg~.,data=train,method="backward")
val.errors=rep(NA,6)
coefi=coef(regfit.bwd,id=i)
pred=test.mat[,names(coefi)]%*%coefi
val.errors[i]=mean((test$mpg-pred)^2)
df=read.csv("Boston.csv",stringsAsFactors = FALSE) # Data from MASS - SL
setwd("C:/software/machine-learning/RandPython")
df=read.csv("Boston.csv",stringsAsFactors = FALSE) # Data from MASS - SL
dim(df)
View(df)
setwd("C:/Users/Ganesh/RandPython-Part3")
df=read.csv("Boston.csv",stringsAsFactors = FALSE) # Data from MASS - SL
train_idx <- trainTestSplit(df,trainPercent=75,seed=5)
train <- df[train_idx, ]
test <- df[-train_idx, ]
fit <- lm(medv~. ,data=train)
summary(fit)
regfit.full=regsubsets(medv~.,train)
summary(regfit.full)
reg.summary=summary(regfit.full)
names(reg.summary)
reg.summary$rsq
par(mfrow=c(2,2))
plot(reg.summary$rss,xlab="Number of Variables",ylab="RSS",type="l")
plot(reg.summary$adjr2,xlab="Number of Variables",ylab="Adjusted RSq",type="l")
which.max(reg.summary$adjr2)
summary(fit)
dim(df)
regfit.full=regsubsets(medv~.,train,nvmax=14)
summary(regfit.full)
reg.summary=summary(regfit.full)
names(reg.summary)
reg.summary$rsq
par(mfrow=c(2,2))
plot(reg.summary$rss,xlab="Number of Variables",ylab="RSS",type="l")
par(mfrow=c(1,1))
plot(reg.summary$rss,xlab="Number of Variables",ylab="RSS",type="l")
plot(reg.summary$adjr2,xlab="Number of Variables",ylab="Adjusted RSq",type="l")
which.max(reg.summary$adjr2)
points(11,reg.summary$adjr2[11], col="red",cex=2,pch=20)
plot(reg.summary$cp,xlab="Number of Variables",ylab="Cp",type='l')
which.min(reg.summary$cp)
points(10,reg.summary$cp[10],col="red",cex=2,pch=20)
which.min(reg.summary$bic)
plot(reg.summary$bic,xlab="Number of Variables",ylab="BIC",type='l')
points(6,reg.summary$bic[6],col="red",cex=2,pch=20)
plot(regfit.full,scale="r2")
plot(regfit.full,scale="adjr2")
plot(regfit.full,scale="Cp")
plot(regfit.full,scale="bic")
coef(regfit.full,6)
regfit.full=regsubsets(mpg~.,train)
summary(regfit.full)
reg.summary=summary(regfit.full)
names(reg.summary)
reg.summary$rsq
par(mfrow=c(2,2))
plot(reg.summary$rss,xlab="Number of Variables",ylab="RSS",type="l")
plot(reg.summary$adjr2,xlab="Number of Variables",ylab="Adjusted RSq",type="l")
which.max(reg.summary$adjr2)
plot(reg.summary$rss,xlab="Number of Variables",ylab="RSS",type="l")
regfit.full=regsubsets(medv~.,train,nvmax=14)
reg.summary=summary(regfit.full)
names(reg.summary)
reg.summary$rsq
plot(reg.summary$rss,xlab="Number of Variables",ylab="RSS",type="l")
par(mfrow=c(1,1))
plot(reg.summary$rss,xlab="Number of Variables",ylab="RSS",type="l")
plot(reg.summary$adjr2,xlab="Number of Variables",ylab="Adjusted RSq",type="l")
which.max(reg.summary$adjr2)
points(11,reg.summary$adjr2[11], col="red",cex=2,pch=20)
plot(reg.summary$cp,xlab="Number of Variables",ylab="Cp",type='l')
which.min(reg.summary$cp)
points(10,reg.summary$cp[10],col="red",cex=2,pch=20)
which.min(reg.summary$bic)
plot(reg.summary$bic,xlab="Number of Variables",ylab="BIC",type='l')
points(6,reg.summary$bic[6],col="red",cex=2,pch=20)
plot(regfit.full,scale="r2")
plot(regfit.full,scale="adjr2")
plot(regfit.full,scale="Cp")
plot(regfit.full,scale="bic")
coef(regfit.full,6)
regfit.fwd=regsubsets(medv~.,data=train,nvmax=14,method="forward")
val.errors=rep(NA,6)
for(i in 1:6){
coefi=coef(regfit.fwd,id=i)
pred=test.mat[,names(coefi)]%*%coefi
val.errors[i]=mean((test$mpg-pred)^2)
}
regfit.fwd=regsubsets(medv~.,data=train,nvmax=14,method="forward")
val.errors=rep(NA,14)
for(i in 1:14){
coefi=coef(regfit.fwd,id=i)
pred=test.mat[,names(coefi)]%*%coefi
val.errors[i]=mean((test$mpg-pred)^2)
}
regfit.fwd=regsubsets(medv~.,data=train,nvmax=14,method="forward")
val.errors=rep(NA,14)
test.mat=model.matrix(medv~.,data=test)
for(i in 1:14){
coefi=coef(regfit.fwd,id=i)
pred=test.mat[,names(coefi)]%*%coefi
val.errors[i]=mean((test$mpg-pred)^2)
}
val.errors
summary(regfit.fwd)
coefi=coef(regfit.fwd,id=i)
coefi
test.mat
pred=test.mat[,names(coefi)]%*%coefi
val.errors[i]=mean((test$mpg-pred)^2)
for(i in 1:14){
coefi=coef(regfit.fwd,id=i)
pred=test.mat[,names(coefi)]%*%coefi
val.errors[i]=mean((test$mpg-pred)^2)
}
val.errors
regfit.fwd=regsubsets(medv~.,data=train,nvmax=14,method="forward")
val.errors=rep(NA,14)
test.mat=model.matrix(medv~.,data=test)
for(i in 1:14){
coefi=coef(regfit.fwd,id=i)
pred=test.mat[,names(coefi)]%*%coefi
val.errors[i]=mean((test$mpg-pred)^2)
}
val.errors
which.min(val.errors)
regfit.fwd=regsubsets(medv~.,data=train,nvmax=14,method="forward")
val.errors=rep(NA,14)
test.mat=model.matrix(medv~.,data=test)
for(i in 1:14){
coefi=coef(regfit.fwd,id=i)
pred=test.mat[,names(coefi)]%*%coefi
val.errors[i]=mean((test$medv-pred)^2)
}
val.errors
which.min(val.errors)
regfit.bwd=regsubsets(medv~.,data=train,nvmax=14,method="backward")
val.errors=rep(NA,6)
test.mat=model.matrix(medv~.,data=test)
regfit.bwd=regsubsets(medv~.,data=train,nvmax=14,method="backward")
val.errors=rep(NA,6)
test.mat=model.matrix(medv~.,data=test)
for(i in 1:6){
coefi=coef(regfit.bwd,id=i)
pred=test.mat[,names(coefi)]%*%coefi
val.errors[i]=mean((test$medv-pred)^2)
}
val.errors
which.min(val.errors)
reg.summary=summary(regfit.bwd)
regBwd.summary=summary(regfit.bwd)
plot(regBwd.summary$rss,xlab="Number of Variables",ylab="RSS",type="l")
a
plot(regBwd.summary$adjr2,xlab="Number of Variables",ylab="Adjusted RSq",type="l")
regfit.fwd=regsubsets(medv~.,data=train,nvmax=14,method="forward")
val.errors=rep(NA,14)
test.mat=model.matrix(medv~.,data=test)
for(i in 1:14){
coefi=coef(regfit.fwd,id=i)
pred=test.mat[,names(coefi)]%*%coefi
val.errors[i]=mean((test$medv-pred)^2)
}
val.errors
which.min(val.errors)
regFwd.summary=summary(regfit.fwd)
plot(regFwd.summary$rss,xlab="Number of Variables",ylab="RSS",type="l")
plot(regFwd.summary$adjr2,xlab="Number of Variables",ylab="Adjusted RSq",type="l")
